#Â File generated by aws2tf see https://github.com/aws-samples/aws2tf
# aws_ecs_task_definition.mesh-gw-proxy-taskdef_4:
resource "aws_ecs_task_definition" "mesh-gw-proxy-taskdef_4" {
  container_definitions = jsonencode(
    [
      {
        command = []
        cpu     = 0
        dependsOn = [
          {
            condition     = "START"
            containerName = "xray"
          },
        ]
        dnsSearchDomains      = []
        dnsServers            = []
        dockerLabels          = {}
        dockerSecurityOptions = []
        entryPoint            = []
        environment = [
          {
            name  = "APPMESH_RESOURCE_ARN"
            value = format("arn:aws:appmesh:%s:%s:mesh/ecs-mesh/virtualGateway/ecsworkshop-vgw", data.aws_region.current.name, data.aws_caller_identity.current.account_id)
          },
          {
            name  = "ENABLE_ENVOY_STATS_TAGS"
            value = "1"
          },
          {
            name  = "ENABLE_ENVOY_XRAY_TRACING"
            value = "1"
          },
          {
            name  = "ENVOY_LOG_LEVEL"
            value = "info"
          },
          {
            name  = "REGION"
            value = data.aws_region.current.name
          },
        ]
        environmentFiles = []
        essential        = true
        extraHosts       = []
        healthCheck = {
          command = [
            "CMD-SHELL",
            "curl -s http://localhost:9901/server_info | grep state | grep -q LIVE",
          ]
          interval = 30
          retries  = 3
          timeout  = 5
        }
        image = "public.ecr.aws/appmesh/aws-appmesh-envoy:v1.18.3.0-prod"
        links = []
        logConfiguration = {
          logDriver = "awslogs"
          options = {
            awslogs-group         = aws_cloudwatch_log_group.ecsworkshop-mesh-gateway.name
            awslogs-region        = data.aws_region.current.name
            awslogs-stream-prefix = "/mesh-gateway"
          }
          secretOptions = []
        }
        memoryReservation = 256
        mountPoints       = []
        name              = "envoy"
        portMappings = [
          {
            containerPort = 3000
            hostPort      = 3000
            protocol      = "tcp"
          },
        ]
        secrets        = []
        systemControls = []
        ulimits = [
          {
            hardLimit = 15000
            name      = "nofile"
            softLimit = 15000
          },
        ]
        volumesFrom = []
      },
      {
        command               = []
        cpu                   = 0
        dnsSearchDomains      = []
        dnsServers            = []
        dockerLabels          = {}
        dockerSecurityOptions = []
        entryPoint            = []
        environment           = []
        environmentFiles      = []
        essential             = true
        extraHosts            = []
        image                 = "amazon/aws-xray-daemon"
        links                 = []
        logConfiguration = {
          logDriver = "awslogs"
          options = {
            awslogs-group         = aws_cloudwatch_log_group.ecsworkshop-mesh-gateway.name
            awslogs-region        = data.aws_region.current.name
            awslogs-stream-prefix = "/xray-container"
          }
          secretOptions = []
        }
        memoryReservation = 256
        mountPoints       = []
        name              = "xray"
        portMappings      = []
        secrets           = []
        systemControls    = []
        ulimits           = []
        user              = "1337"
        volumesFrom       = []
      },
    ]
  )
  cpu                = "256"
  execution_role_arn = aws_iam_role.r-ecsworkshop-base-meshgwproxytaskdefExecutionRoleC1-6EFVJAQ6X4TG.arn
  family             = "mesh-gw-proxy-taskdef"
  memory             = "512"
  network_mode       = "awsvpc"
  requires_compatibilities = [
    "FARGATE",
  ]
  tags          = {}
  tags_all      = {}
  task_role_arn = aws_iam_role.r-ecsworkshop-base-meshgwproxytaskdefTaskRoleBD296B1-NJZEXY41X498.arn
}
